{% for i, class in all.sigs.items() -%}
from sklearn.linear_model import {{class.class_name}}
{%- endfor %}
import os
import numpy as np


{% for i, class in all.sigs.items() -%}
def load_obj(path):
    return np.load(path, allow_pickle=True).item()


def save_obj(obj, class_name):
    np.save(os.path.join('{{all.cwd}}', str(class_name) + '_constructor'),
            obj, allow_pickle=True)
    return


def {{class.class_name}}_constructor(body):
    init = body['init']
    res = {{class.class_name}}(**init)
    save_obj(res, '{{class.class_name}}')
    return res


{% for member_name, parameter in class.members.items() %}
def {{class.class_name}}_{{member_name}}(body):
    obj =load_obj(os.path.join('{{all.cwd}}', '{{class.class_name}}_constructor.npy'))
    res = obj.{{member_name}}(**body['paras'])
    save_obj(obj, '{{class.class_name}}')
    return res
{% endfor %}


{%- endfor %}

# X = [[1, 1], [1, 2], [2, 2], [2, 3]]
# y = list(np.dot(X, np.array([1, 2])))

# body = {
#     'init': {},
#     'paras': {
#         'X': X,
#         'y': y
#     }
# }

# p_body = {
#     'paras': {'X': [[3, 5]]}
# }


# a_body = {
#     'attr':'coef_'
# }

# print(LinearRegression_constructor(body))
# print(LinearRegression_fit(body))
# print(LinearRegression_predict(p_body))
# print(LinearRegression_score(body))